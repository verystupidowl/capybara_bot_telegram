package ru.tggc.capybaratelegrambot.domain.dto.fight.enums;

import lombok.Getter;
import ru.tggc.capybaratelegrambot.domain.dto.fight.BossFightState;
import ru.tggc.capybaratelegrambot.domain.dto.fight.DamageEvent;
import ru.tggc.capybaratelegrambot.domain.dto.fight.effect.negative.BlindnessEffect;
import ru.tggc.capybaratelegrambot.domain.dto.fight.effect.negative.PoisonEffect;
import ru.tggc.capybaratelegrambot.domain.dto.fight.effect.negative.StunEffect;
import ru.tggc.capybaratelegrambot.domain.dto.fight.effect.negative.WeakenedEffect;
import ru.tggc.capybaratelegrambot.utils.RandomUtils;

import java.util.List;
import java.util.function.BiFunction;

@Getter
public enum BossAction {
    TAIL_ON_THE_WATER((fight, alivePlayers) -> {
        StringBuilder log = new StringBuilder("–ë–æ—Å—Å –±—å—ë—Ç –ø–æ –≤–æ–¥–µ —Ö–≤–æ—Å—Ç–æ–º!üåä");
        alivePlayers.forEach(ps -> {
            int damage = RandomUtils.getRandomInt(30) + 10;
            DamageEvent damageEvent = ps.applyDamage(damage);
            log.append("üåä ").append(ps.getUsername())
                    .append(" –ø–æ–ª—É—á–∏–ª ").append(damageEvent.getDamage())
                    .append(" —É—Ä–æ–Ω–∞");
        });
        return log.toString();
    }),
    BITE((fight, alivePlayers) -> {
        BossFightState.PlayerState ps = RandomUtils.getRandomFromList(alivePlayers);
        int damage = RandomUtils.getRandomInt(30) + 50;
        DamageEvent damageEvent = ps.applyDamage(damage);
        return "ü¶∑ –ë–æ—Å—Å —É–∫—É—Å–∏–ª " + ps.getUsername() +
                " –Ω–∞ " + damageEvent.getDamage() +
                " —É—Ä–æ–Ω–∞";
    }),
    STUN((fight, alivePlayers) -> {
        BossFightState.PlayerState ps = RandomUtils.getRandomFromList(alivePlayers);
        int damage = RandomUtils.getRandomInt(30) + 1;
        DamageEvent damageEvent = ps.applyDamage(damage);
        ps.getPlayerStats().getEffects().add(new StunEffect(1));
        return "üí• –ë–æ—Å—Å –∑–∞—Å—Ç–∞–Ω–∏–ª " + ps.getUsername() + " –Ω–∞ " + damageEvent.getDamage();
    }),
    AOE_DAMAGE((fight, alivePlayers) -> {
        StringBuilder log = new StringBuilder("üåä –ë–æ—Å—Å –ø–æ–¥–Ω—è–ª –≤–æ–ª–Ω—É –∏ —É–¥–∞—Ä–∏–ª –≤—Å–µ—Ö!\n");
        alivePlayers.forEach(ps -> {
            int damage = RandomUtils.getRandomInt(10) + 10;
            DamageEvent damageEvent = ps.applyDamage(damage);
            log.append(" ‚îî ").append(ps.getUsername())
                    .append(" –ø–æ–ª—É—á–∏–ª ").append(damageEvent.getDamage())
                    .append(" —É—Ä–æ–Ω–∞");
        });
        return log.toString();
    }),
    AOE_STUN((fight, alivePlayers) -> {
        StringBuilder log = new StringBuilder("‚ö° –ë–æ—Å—Å –∏–∑–¥–∞–ª —Ä—ë–≤, —Å–æ—Ç—Ä—è—Å–∞—è –∑–µ–º–ª—é!\n");
        alivePlayers.stream()
                .filter(ps -> RandomUtils.chance(0.5))
                .forEach(ps -> {
                    int damage = RandomUtils.getRandomInt(10);
                    DamageEvent damageEvent = ps.applyDamage(damage);
                    log.append(" ‚îî üòµ ").append(ps.getUsername())
                            .append(" –æ–≥–ª—É—à—ë–Ω –∏ –ø–æ–ª—É—á–∏–ª ").append(damageEvent.getDamage())
                            .append(" —É—Ä–æ–Ω–∞");
                });
        return log.toString();
    }),
    HEAL((fight, alivePlayers) -> {
        int heal = RandomUtils.getRandomInt(30) + 10;
        return "ü©∏ –ë–æ—Å—Å –≤—Ç—è–Ω—É–ª —Å–∏–ª—ã –∏–∑ –∑–µ–º–ª–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª " + heal;
    }),
    FOCUSED_STRIKE((fight, alivePlayers) -> {
        StringBuilder log = new StringBuilder();
        BossFightState.PlayerState ps = RandomUtils.getRandomFromList(alivePlayers);
        int damage = RandomUtils.getRandomInt(30) + 20;
        if (RandomUtils.chance(0.2)) {
            log.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω!");
            damage *= 2;
        }
        DamageEvent damageEvent = ps.applyDamage(damage);
        return log.append("üí¢ –ë–æ—Å—Å –Ω–∞–Ω—ë—Å –º–æ—â–Ω—ã–π —É–¥–∞—Ä –ø–æ ").append(ps.getUsername())
                .append(" –Ω–∞ ").append(damageEvent.getDamage())
                .append(" —É—Ä–æ–Ω–∞")
                .toString();
    }),
    POISON_BITE((fight, alivePlayers) -> {
        BossFightState.PlayerState ps = RandomUtils.getRandomFromList(alivePlayers);
        int damage = RandomUtils.getRandomInt(50) + 10;
        ps.getPlayerStats().getEffects().add(new PoisonEffect());
        DamageEvent damageEvent = ps.applyDamage(damage);
        return "\uD83D\uDCA6 –ë–æ—Å—Å —Å–¥–µ–ª–∞–ª —è–¥–æ–≤–∏—Ç—ã–π —É–∫—É—Å! –ø–æ " + ps.getUsername() +
                " –Ω–∞ " + damageEvent.getDamage() + "! –¢–µ–ø–µ—Ä—å –µ–º—É –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ—è–¥–∏–µ\uD83E\uDDEA";
    }),
    TAIL_SLAM_DUST((fight, alivePlayers) -> {
        BossFightState.PlayerState ps = RandomUtils.getRandomFromList(alivePlayers);
        int damage = RandomUtils.getRandomInt(10) + 5;
        ps.getPlayerStats().getEffects().add(new BlindnessEffect(0.25, 10));
        DamageEvent damageEvent = ps.applyDamage(damage);
        return "–ë–æ—Å—Å –±—å—ë—Ç —Ö–≤–æ—Å—Ç–æ–º –ø–æ –∑–µ–º–ª–µ, –ø–æ–¥–Ω–∏–º–∞—è –æ–±–ª–∞–∫–æ –ø—ã–ª–∏. –û–Ω–∞ –æ—Å–ª–µ–ø–ª—è–µ—Ç " +
                ps.getUsername() + ", –∑–∞—Å—Ç–∞–≤–ª—è—è –µ–≥–æ –ø—Ä–æ–º–∞—Ö–∏–≤–∞—Ç—å—Å—è –∏ –Ω–∞–Ω–æ—Å–∏—Ç –µ–º—É " +
                damageEvent.getDamage() + " —É—Ä–æ–Ω–∞! –ö–∞–ø–∏–±–∞—Ä–µ –Ω—É–∂–Ω–æ 10 —Ö–æ–¥–æ–≤, —á—Ç–æ–±—ã –æ–ø—Ä–∞–≤–∏—Ç—å—Å—è";
    }),
    TAIL_MUD_SPLASH((fight, alivePlayers) -> {
        StringBuilder log = new StringBuilder("–ë–æ—Å—Å –±—å–µ—Ç —Ö–≤–æ—Å—Ç–æ–º –ø–æ –≥—Ä—è–∑–∏ –∏ –∑–∞–ª–∏–≤–∞–µ—Ç –≤—Å–µ–º –∫–∞–ø–∏–±–∞—Ä–∞–º –≥–ª–∞–∑–∞\n")
                .append("–ò–º –Ω—É–∂–Ω–æ 3 —Ö–æ–¥–∞, —á—Ç–æ–±—ã –æ–ø—Ä–∞–≤–∏—Ç—å—Å—è, –∞ –ø–æ–∫–∞ –∏—Ö —É—Ä–æ–Ω —É–º–µ–Ω—å—à–µ–Ω –≤–¥–≤–æ–µ!");
        int damage = RandomUtils.getRandomInt(10) + 5;
        alivePlayers.forEach(ps -> {
            ps.getPlayerStats().getEffects().add(new WeakenedEffect(0.5, 3));
            DamageEvent damageEvent = ps.applyDamage(damage);
            log.append(" ‚îî ").append(ps.getUsername())
                    .append(" –ø–æ–ª—É—á–∏–ª ").append(damageEvent.getDamage())
                    .append(" —É—Ä–æ–Ω–∞");
        });
        return log.toString();
    });

    private final BiFunction<BossFightState, List<BossFightState.PlayerState>, String> function;

    BossAction(BiFunction<BossFightState, List<BossFightState.PlayerState>, String> function) {
        this.function = function;
    }

    public String apply(BossFightState fight, List<BossFightState.PlayerState> alivePlayers) {
        return function.apply(fight, alivePlayers);
    }
}
